// Generated by gencpp from file anorosdt/AnoRosDT_User.msg
// DO NOT EDIT!


#ifndef ANOROSDT_MESSAGE_ANOROSDT_USER_H
#define ANOROSDT_MESSAGE_ANOROSDT_USER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace anorosdt
{
template <class ContainerAllocator>
struct AnoRosDT_User_
{
  typedef AnoRosDT_User_<ContainerAllocator> Type;

  AnoRosDT_User_()
    : s81(0)
    , s82(0)
    , s83(0)
    , s161(0)
    , s162(0)
    , s163(0)  {
    }
  AnoRosDT_User_(const ContainerAllocator& _alloc)
    : s81(0)
    , s82(0)
    , s83(0)
    , s161(0)
    , s162(0)
    , s163(0)  {
  (void)_alloc;
    }



   typedef int8_t _s81_type;
  _s81_type s81;

   typedef int8_t _s82_type;
  _s82_type s82;

   typedef int8_t _s83_type;
  _s83_type s83;

   typedef int16_t _s161_type;
  _s161_type s161;

   typedef int16_t _s162_type;
  _s162_type s162;

   typedef int16_t _s163_type;
  _s163_type s163;





  typedef boost::shared_ptr< ::anorosdt::AnoRosDT_User_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::anorosdt::AnoRosDT_User_<ContainerAllocator> const> ConstPtr;

}; // struct AnoRosDT_User_

typedef ::anorosdt::AnoRosDT_User_<std::allocator<void> > AnoRosDT_User;

typedef boost::shared_ptr< ::anorosdt::AnoRosDT_User > AnoRosDT_UserPtr;
typedef boost::shared_ptr< ::anorosdt::AnoRosDT_User const> AnoRosDT_UserConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::anorosdt::AnoRosDT_User_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::anorosdt::AnoRosDT_User_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::anorosdt::AnoRosDT_User_<ContainerAllocator1> & lhs, const ::anorosdt::AnoRosDT_User_<ContainerAllocator2> & rhs)
{
  return lhs.s81 == rhs.s81 &&
    lhs.s82 == rhs.s82 &&
    lhs.s83 == rhs.s83 &&
    lhs.s161 == rhs.s161 &&
    lhs.s162 == rhs.s162 &&
    lhs.s163 == rhs.s163;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::anorosdt::AnoRosDT_User_<ContainerAllocator1> & lhs, const ::anorosdt::AnoRosDT_User_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace anorosdt

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::anorosdt::AnoRosDT_User_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anorosdt::AnoRosDT_User_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anorosdt::AnoRosDT_User_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anorosdt::AnoRosDT_User_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anorosdt::AnoRosDT_User_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anorosdt::AnoRosDT_User_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::anorosdt::AnoRosDT_User_<ContainerAllocator> >
{
  static const char* value()
  {
    return "05cdfff3f17b75de6605f7c94c65a117";
  }

  static const char* value(const ::anorosdt::AnoRosDT_User_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x05cdfff3f17b75deULL;
  static const uint64_t static_value2 = 0x6605f7c94c65a117ULL;
};

template<class ContainerAllocator>
struct DataType< ::anorosdt::AnoRosDT_User_<ContainerAllocator> >
{
  static const char* value()
  {
    return "anorosdt/AnoRosDT_User";
  }

  static const char* value(const ::anorosdt::AnoRosDT_User_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::anorosdt::AnoRosDT_User_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 s81\n"
"int8 s82\n"
"int8 s83\n"
"int16 s161\n"
"int16 s162\n"
"int16 s163\n"
"\n"
;
  }

  static const char* value(const ::anorosdt::AnoRosDT_User_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::anorosdt::AnoRosDT_User_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.s81);
      stream.next(m.s82);
      stream.next(m.s83);
      stream.next(m.s161);
      stream.next(m.s162);
      stream.next(m.s163);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AnoRosDT_User_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::anorosdt::AnoRosDT_User_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::anorosdt::AnoRosDT_User_<ContainerAllocator>& v)
  {
    s << indent << "s81: ";
    Printer<int8_t>::stream(s, indent + "  ", v.s81);
    s << indent << "s82: ";
    Printer<int8_t>::stream(s, indent + "  ", v.s82);
    s << indent << "s83: ";
    Printer<int8_t>::stream(s, indent + "  ", v.s83);
    s << indent << "s161: ";
    Printer<int16_t>::stream(s, indent + "  ", v.s161);
    s << indent << "s162: ";
    Printer<int16_t>::stream(s, indent + "  ", v.s162);
    s << indent << "s163: ";
    Printer<int16_t>::stream(s, indent + "  ", v.s163);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANOROSDT_MESSAGE_ANOROSDT_USER_H
