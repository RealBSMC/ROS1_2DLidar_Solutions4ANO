// Generated by gencpp from file anorosdt/AnoRosDT_KZFC.msg
// DO NOT EDIT!


#ifndef ANOROSDT_MESSAGE_ANOROSDT_KZFC_H
#define ANOROSDT_MESSAGE_ANOROSDT_KZFC_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace anorosdt
{
template <class ContainerAllocator>
struct AnoRosDT_KZFC_
{
  typedef AnoRosDT_KZFC_<ContainerAllocator> Type;

  AnoRosDT_KZFC_()
    : ACC_X(0)
    , ACC_Y(0)
    , ACC_Z(0)
    , YAW(0)
    , GYR_X(0)
    , GYR_Y(0)
    , GYR_Z(0)  {
    }
  AnoRosDT_KZFC_(const ContainerAllocator& _alloc)
    : ACC_X(0)
    , ACC_Y(0)
    , ACC_Z(0)
    , YAW(0)
    , GYR_X(0)
    , GYR_Y(0)
    , GYR_Z(0)  {
  (void)_alloc;
    }



   typedef int16_t _ACC_X_type;
  _ACC_X_type ACC_X;

   typedef int16_t _ACC_Y_type;
  _ACC_Y_type ACC_Y;

   typedef int16_t _ACC_Z_type;
  _ACC_Z_type ACC_Z;

   typedef int16_t _YAW_type;
  _YAW_type YAW;

   typedef int16_t _GYR_X_type;
  _GYR_X_type GYR_X;

   typedef int16_t _GYR_Y_type;
  _GYR_Y_type GYR_Y;

   typedef int16_t _GYR_Z_type;
  _GYR_Z_type GYR_Z;





  typedef boost::shared_ptr< ::anorosdt::AnoRosDT_KZFC_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::anorosdt::AnoRosDT_KZFC_<ContainerAllocator> const> ConstPtr;

}; // struct AnoRosDT_KZFC_

typedef ::anorosdt::AnoRosDT_KZFC_<std::allocator<void> > AnoRosDT_KZFC;

typedef boost::shared_ptr< ::anorosdt::AnoRosDT_KZFC > AnoRosDT_KZFCPtr;
typedef boost::shared_ptr< ::anorosdt::AnoRosDT_KZFC const> AnoRosDT_KZFCConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::anorosdt::AnoRosDT_KZFC_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::anorosdt::AnoRosDT_KZFC_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::anorosdt::AnoRosDT_KZFC_<ContainerAllocator1> & lhs, const ::anorosdt::AnoRosDT_KZFC_<ContainerAllocator2> & rhs)
{
  return lhs.ACC_X == rhs.ACC_X &&
    lhs.ACC_Y == rhs.ACC_Y &&
    lhs.ACC_Z == rhs.ACC_Z &&
    lhs.YAW == rhs.YAW &&
    lhs.GYR_X == rhs.GYR_X &&
    lhs.GYR_Y == rhs.GYR_Y &&
    lhs.GYR_Z == rhs.GYR_Z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::anorosdt::AnoRosDT_KZFC_<ContainerAllocator1> & lhs, const ::anorosdt::AnoRosDT_KZFC_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace anorosdt

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::anorosdt::AnoRosDT_KZFC_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anorosdt::AnoRosDT_KZFC_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anorosdt::AnoRosDT_KZFC_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anorosdt::AnoRosDT_KZFC_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anorosdt::AnoRosDT_KZFC_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anorosdt::AnoRosDT_KZFC_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::anorosdt::AnoRosDT_KZFC_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b57d4a5850f5dc3a3d969205c6c91b57";
  }

  static const char* value(const ::anorosdt::AnoRosDT_KZFC_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb57d4a5850f5dc3aULL;
  static const uint64_t static_value2 = 0x3d969205c6c91b57ULL;
};

template<class ContainerAllocator>
struct DataType< ::anorosdt::AnoRosDT_KZFC_<ContainerAllocator> >
{
  static const char* value()
  {
    return "anorosdt/AnoRosDT_KZFC";
  }

  static const char* value(const ::anorosdt::AnoRosDT_KZFC_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::anorosdt::AnoRosDT_KZFC_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 ACC_X #加速度\n"
"int16 ACC_Y\n"
"int16 ACC_Z\n"
"int16 YAW\n"
"int16 GYR_X #陀螺仪\n"
"int16 GYR_Y\n"
"int16 GYR_Z\n"
"\n"
;
  }

  static const char* value(const ::anorosdt::AnoRosDT_KZFC_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::anorosdt::AnoRosDT_KZFC_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ACC_X);
      stream.next(m.ACC_Y);
      stream.next(m.ACC_Z);
      stream.next(m.YAW);
      stream.next(m.GYR_X);
      stream.next(m.GYR_Y);
      stream.next(m.GYR_Z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AnoRosDT_KZFC_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::anorosdt::AnoRosDT_KZFC_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::anorosdt::AnoRosDT_KZFC_<ContainerAllocator>& v)
  {
    s << indent << "ACC_X: ";
    Printer<int16_t>::stream(s, indent + "  ", v.ACC_X);
    s << indent << "ACC_Y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.ACC_Y);
    s << indent << "ACC_Z: ";
    Printer<int16_t>::stream(s, indent + "  ", v.ACC_Z);
    s << indent << "YAW: ";
    Printer<int16_t>::stream(s, indent + "  ", v.YAW);
    s << indent << "GYR_X: ";
    Printer<int16_t>::stream(s, indent + "  ", v.GYR_X);
    s << indent << "GYR_Y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.GYR_Y);
    s << indent << "GYR_Z: ";
    Printer<int16_t>::stream(s, indent + "  ", v.GYR_Z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANOROSDT_MESSAGE_ANOROSDT_KZFC_H
