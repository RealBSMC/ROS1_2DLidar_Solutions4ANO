// Generated by gencpp from file anorosdt/RemoteControl.msg
// DO NOT EDIT!


#ifndef ANOROSDT_MESSAGE_REMOTECONTROL_H
#define ANOROSDT_MESSAGE_REMOTECONTROL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace anorosdt
{
template <class ContainerAllocator>
struct RemoteControl_
{
  typedef RemoteControl_<ContainerAllocator> Type;

  RemoteControl_()
    : header()
    , ch1_rol(0)
    , ch2_pit(0)
    , ch3_thr(0)
    , ch4_yaw(0)
    , ch5_aux1(0)
    , ch6_aux2(0)
    , ch7_aux3(0)
    , ch8_aux4(0)
    , ch9_aux5(0)
    , ch10_aux6(0)  {
    }
  RemoteControl_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ch1_rol(0)
    , ch2_pit(0)
    , ch3_thr(0)
    , ch4_yaw(0)
    , ch5_aux1(0)
    , ch6_aux2(0)
    , ch7_aux3(0)
    , ch8_aux4(0)
    , ch9_aux5(0)
    , ch10_aux6(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint16_t _ch1_rol_type;
  _ch1_rol_type ch1_rol;

   typedef uint16_t _ch2_pit_type;
  _ch2_pit_type ch2_pit;

   typedef uint16_t _ch3_thr_type;
  _ch3_thr_type ch3_thr;

   typedef uint16_t _ch4_yaw_type;
  _ch4_yaw_type ch4_yaw;

   typedef uint16_t _ch5_aux1_type;
  _ch5_aux1_type ch5_aux1;

   typedef uint16_t _ch6_aux2_type;
  _ch6_aux2_type ch6_aux2;

   typedef uint16_t _ch7_aux3_type;
  _ch7_aux3_type ch7_aux3;

   typedef uint16_t _ch8_aux4_type;
  _ch8_aux4_type ch8_aux4;

   typedef uint16_t _ch9_aux5_type;
  _ch9_aux5_type ch9_aux5;

   typedef uint16_t _ch10_aux6_type;
  _ch10_aux6_type ch10_aux6;





  typedef boost::shared_ptr< ::anorosdt::RemoteControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::anorosdt::RemoteControl_<ContainerAllocator> const> ConstPtr;

}; // struct RemoteControl_

typedef ::anorosdt::RemoteControl_<std::allocator<void> > RemoteControl;

typedef boost::shared_ptr< ::anorosdt::RemoteControl > RemoteControlPtr;
typedef boost::shared_ptr< ::anorosdt::RemoteControl const> RemoteControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::anorosdt::RemoteControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::anorosdt::RemoteControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::anorosdt::RemoteControl_<ContainerAllocator1> & lhs, const ::anorosdt::RemoteControl_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.ch1_rol == rhs.ch1_rol &&
    lhs.ch2_pit == rhs.ch2_pit &&
    lhs.ch3_thr == rhs.ch3_thr &&
    lhs.ch4_yaw == rhs.ch4_yaw &&
    lhs.ch5_aux1 == rhs.ch5_aux1 &&
    lhs.ch6_aux2 == rhs.ch6_aux2 &&
    lhs.ch7_aux3 == rhs.ch7_aux3 &&
    lhs.ch8_aux4 == rhs.ch8_aux4 &&
    lhs.ch9_aux5 == rhs.ch9_aux5 &&
    lhs.ch10_aux6 == rhs.ch10_aux6;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::anorosdt::RemoteControl_<ContainerAllocator1> & lhs, const ::anorosdt::RemoteControl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace anorosdt

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::anorosdt::RemoteControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anorosdt::RemoteControl_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anorosdt::RemoteControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anorosdt::RemoteControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anorosdt::RemoteControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anorosdt::RemoteControl_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::anorosdt::RemoteControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e1963d82fd812e9adaa94b186ce59d08";
  }

  static const char* value(const ::anorosdt::RemoteControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe1963d82fd812e9aULL;
  static const uint64_t static_value2 = 0xdaa94b186ce59d08ULL;
};

template<class ContainerAllocator>
struct DataType< ::anorosdt::RemoteControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "anorosdt/RemoteControl";
  }

  static const char* value(const ::anorosdt::RemoteControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::anorosdt::RemoteControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint16 ch1_rol\n"
"uint16 ch2_pit\n"
"uint16 ch3_thr\n"
"uint16 ch4_yaw\n"
"uint16 ch5_aux1\n"
"uint16 ch6_aux2\n"
"uint16 ch7_aux3\n"
"uint16 ch8_aux4\n"
"uint16 ch9_aux5\n"
"uint16 ch10_aux6\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::anorosdt::RemoteControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::anorosdt::RemoteControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ch1_rol);
      stream.next(m.ch2_pit);
      stream.next(m.ch3_thr);
      stream.next(m.ch4_yaw);
      stream.next(m.ch5_aux1);
      stream.next(m.ch6_aux2);
      stream.next(m.ch7_aux3);
      stream.next(m.ch8_aux4);
      stream.next(m.ch9_aux5);
      stream.next(m.ch10_aux6);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RemoteControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::anorosdt::RemoteControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::anorosdt::RemoteControl_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ch1_rol: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ch1_rol);
    s << indent << "ch2_pit: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ch2_pit);
    s << indent << "ch3_thr: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ch3_thr);
    s << indent << "ch4_yaw: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ch4_yaw);
    s << indent << "ch5_aux1: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ch5_aux1);
    s << indent << "ch6_aux2: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ch6_aux2);
    s << indent << "ch7_aux3: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ch7_aux3);
    s << indent << "ch8_aux4: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ch8_aux4);
    s << indent << "ch9_aux5: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ch9_aux5);
    s << indent << "ch10_aux6: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ch10_aux6);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANOROSDT_MESSAGE_REMOTECONTROL_H
